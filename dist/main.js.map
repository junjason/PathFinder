{"version":3,"file":"main.js","mappings":"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","sources":["webpack://pathfinder/./src/scripts/grid.js","webpack://pathfinder/./src/scripts/route.js","webpack://pathfinder/./src/index.js"],"sourcesContent":["class Grid {\n    constructor(gridContainer) {\n        this.gridContainer = gridContainer;\n        this.createGrid();\n    }\n\n    createGrid() {\n        // 3d version\n        // const numFloors = 2;\n        // const numRows = 23;\n        // const numCols = 23;\n        // for(let i = 0; i < numFloors; i++) {\n        //     let floor = document.createElement(\"table\");      // for each floor, create a table\n        //     floor.classList.add(`floor-${i}`);\n        //     for(let j = 0; j < numRows; j++) {\n        //         let row = document.createElement(\"tr\");       // for each row, create row and add into table\n        //         row.classList.add(`row-${j}`);                            // add a class of row {row#}\n        //         for(let k = 0; k < numCols; k++) {\n        //             let sq = document.createElement(\"td\");\n        //             sq.classList.add(`${i}-${j}-${k}`);\n        //             row.appendChild(sq);\n        //         }\n        //         floor.appendChild(row);\n        //     }\n        //     // debugger\n        //     this.gridContainer.appendChild(floor);\n        // }\n\n        // 2d version\n        const numRows = 23;\n        const numCols = 46;\n        let floor = document.createElement(\"table\");      // for each floor, create a table\n        floor.classList.add(`table`);\n        for(let j = 0; j < numRows; j++) {\n            let row = document.createElement(\"tr\");       // for each row, create row and add into table\n            row.classList.add(`row-${j}`);                            // add a class of row {row#}\n            for(let k = 0; k < numCols; k++) {\n                let node = document.createElement(\"td\");\n                node.classList.add(`n-${j}-${k}`);\n                row.appendChild(node);\n            }\n            floor.appendChild(row);\n        }\n        this.gridContainer.appendChild(floor);\n\n        let start = document.querySelector(\".n-11-11\");\n        let end = document.querySelector(\".n-11-31\");\n        // debugger;\n        start.classList.add(\"start\");\n        end.classList.add(\"end\");\n\n        start.setAttribute(\"draggable\", \"true\");\n        end.setAttribute(\"draggable\", \"true\");\n\n        start.innerHTML = \"<i class=\\\"fas fa-location-arrow\\\"></i>\";\n        end.innerHTML = \"<i class=\\\"far fa-times-circle\\\"></i>\";\n    }\n}\n\nexport default Grid;","class Route {\n    constructor(grid, start, end) {\n        this.grid = grid;\n        this.start = start;\n        this.end = end;\n        this.visitedInOrder = [];\n        this.routeFromEndToStart = [];\n    }\n\n    // finds BFS - logic only\n    runBFS() {\n        let queue = [];\n        let visited = new Set();\n        queue.push(this.start);\n        this.visitedInOrder = [];\n\n        // debugger;\n        while (queue.length !== 0) {\n            let next = queue.shift();\n            // if next === end\n            if (this.getPos(next).join(\"-\") === this.getPos(this.end).join(\"-\")) {\n                this.animateVisited();\n                this.backTrack();\n                return true;\n            }\n            \n            // if not, visit all the neighbors + add them to the queue\n            let nextPos = this.getPos(next);\n\n            // visit east\n            let left = document.querySelector(`.n-${nextPos[0]}-${parseInt(nextPos[1])+1}`);\n            if (left && !visited.has(this.getPos(left).join(\"-\"))) {\n                left.classList.add(\"cookie-west\");\n                this.visitedInOrder.push(left);\n                queue.push(left);\n                visited.add(this.getPos(left).join(\"-\"));\n            }\n            \n            // visit south\n            let down = document.querySelector(`.n-${parseInt(nextPos[0])+1}-${nextPos[1]}`);\n            if (down && !visited.has(this.getPos(down).join(\"-\"))) {\n                down.classList.add(\"cookie-north\");\n                this.visitedInOrder.push(down);\n                queue.push(down);\n                visited.add(this.getPos(down).join(\"-\"));\n            }\n\n            // visit west\n            let right = document.querySelector(`.n-${nextPos[0]}-${parseInt(nextPos[1])-1}`);\n            if (right && !visited.has(this.getPos(right).join(\"-\"))) {\n                right.classList.add(\"cookie-east\");\n                this.visitedInOrder.push(right);\n                queue.push(right);\n                visited.add(this.getPos(right).join(\"-\"));\n            }\n\n            // visit north\n            let up = document.querySelector(`.n-${parseInt(nextPos[0])-1}-${nextPos[1]}`);\n            if (up && !visited.has(this.getPos(up).join(\"-\"))) {\n                up.classList.add(\"cookie-south\");\n                this.visitedInOrder.push(up);\n                queue.push(up);\n                visited.add(this.getPos(up).join(\"-\"));\n            }\n        }\n        this.animateVisited();\n        return false;\n    }\n\n    runDFS() {\n        let stack = [];\n        let visited = new Set();\n        stack.push(this.start);\n        this.visitedInOrder = [];\n\n        while (stack.length !== 0) {\n            let next = stack.pop();\n            // if next === end\n            if (this.getPos(next).join(\"-\") === this.getPos(this.end).join(\"-\")) {\n                this.animateVisited();\n                return true;\n            }\n            // if not, visit all the neighbors + add them to the queue\n            let nextPos = this.getPos(next);\n\n            // visit east\n            let left = document.querySelector(`.n-${nextPos[0]}-${parseInt(nextPos[1])+1}`);\n            if (left && !visited.has(this.getPos(left).join(\"-\"))) {\n                left.classList.add(\"cookie-west\");\n                this.visitedInOrder.push(left);\n                stack.push(left);\n                visited.add(this.getPos(left).join(\"-\"));\n            }\n            \n            // visit south\n            let down = document.querySelector(`.n-${parseInt(nextPos[0])+1}-${nextPos[1]}`);\n            if (down && !visited.has(this.getPos(down).join(\"-\"))) {\n                down.classList.add(\"cookie-north\");\n                this.visitedInOrder.push(down);\n                stack.push(down);\n                visited.add(this.getPos(down).join(\"-\"));\n            }\n\n            // visit west\n            let right = document.querySelector(`.n-${nextPos[0]}-${parseInt(nextPos[1])-1}`);\n            if (right && !visited.has(this.getPos(right).join(\"-\"))) {\n                right.classList.add(\"cookie-east\");\n                this.visitedInOrder.push(right);\n                stack.push(right);\n                visited.add(this.getPos(right).join(\"-\"));\n            }\n\n            // visit north\n            let up = document.querySelector(`.n-${parseInt(nextPos[0])-1}-${nextPos[1]}`);\n            if (up && !visited.has(this.getPos(up).join(\"-\"))) {\n                up.classList.add(\"cookie-south\");\n                this.visitedInOrder.push(up);\n                stack.push(up);\n                visited.add(this.getPos(up).join(\"-\"));\n            }\n        }\n        this.animateVisited();\n        return false;\n    }\n\n    getPos(node) {\n        let classes = node.className;\n        let classNames = classes.split(\" \");\n        let coordinates = classNames[0];\n        let pos = coordinates.split(\"-\");\n        let x = pos[1];\n        let y = pos[2];\n        return [x,y];\n    }\n\n    animateVisited() {\n        for (let i = 0; i < this.visitedInOrder.length; i++) {\n            // debugger;\n            setTimeout(() => {\n                if (!this.visitedInOrder[i].classList.contains(\"start\") && \n                    !this.visitedInOrder[i].classList.contains(\"end\") ) {\n                    this.visitedInOrder[i].innerHTML = \"<i class=\\\"fa-solid fa-cookie-bite\\\"></i>\";\n                }\n            }, 25*i);\n        }\n    }\n\n    backTrack() {\n        // start at end node + use cookies to find path from end to start\n        let currentNode = this.end;\n        this.routeFromEndToStart = [];\n        while (this.getPos(currentNode).join(\"-\") !== this.getPos(this.start).join(\"-\")) {\n            // console.log(\"hi\")\n            // debugger;\n            this.routeFromEndToStart.push(currentNode);\n            let currPos = this.getPos(currentNode);\n\n            // came from south, go south\n            if (currentNode.classList.contains(\"cookie-south\")) {\n                let down = document.querySelector(`.n-${parseInt(currPos[0])+1}-${currPos[1]}`);\n                currentNode = down;\n            }\n            else if (currentNode.classList.contains(\"cookie-north\")) {\n                let up = document.querySelector(`.n-${parseInt(currPos[0])-1}-${currPos[1]}`);\n                currentNode = up;\n            }\n            else if (currentNode.classList.contains(\"cookie-east\")) {\n                let right = document.querySelector(`.n-${currPos[0]}-${parseInt(currPos[1])+1}`);\n                currentNode = right;\n            }\n            else if (currentNode.classList.contains(\"cookie-west\")) {\n                let left = document.querySelector(`.n-${currPos[0]}-${parseInt(currPos[1])-1}`);\n                currentNode = left;\n            }            \n        }\n        this.routeFromEndToStart.push(currentNode);\n        this.animateBackTrack();\n    }\n\n    animateBackTrack() {\n        for (let i = this.routeFromEndToStart.length-1; i >= 0; i--) {\n            // debugger;\n            setTimeout(() => {\n                this.routeFromEndToStart[i].style.backgroundColor = 'yellow';\n            }, 25*i);\n        }\n    }\n}\n\nexport default Route;","import Grid from \"./scripts/grid\";\nimport Route from \"./scripts/route\";\n\nlet grid = null;\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n    // console.log(\"Hello from index.js\");\n    const gridContainer = document.querySelector(\".grid-container\");\n    grid = new Grid(gridContainer);\n\n    let visualizeBFS = document.querySelector(\".visualizeBFS\");\n    let visualizeDFS = document.querySelector(\".visualizeDFS\");\n\n    visualizeBFS.addEventListener(\"click\", () => {\n        let start = document.querySelector(\".start\");\n        let end = document.querySelector(\".end\");\n        let route = new Route(grid, start, end);\n        let pathFound = route.runBFS();\n        // debugger;\n        // if (pathFound) route.backTrack();\n    });\n\n    visualizeDFS.addEventListener(\"click\", () => {\n        let start = document.querySelector(\".start\");\n        let end = document.querySelector(\".end\");\n        let route = new Route(grid, start, end);\n        let pathFound = route.runDFS();\n        if (pathFound) route.backTrack();\n    });\n});\n\n\n\n\n\n\n\n\n\n"],"names":["constructor","gridContainer","this","createGrid","floor","document","createElement","classList","add","j","row","k","node","appendChild","start","querySelector","end","setAttribute","innerHTML","grid","visitedInOrder","routeFromEndToStart","runBFS","queue","visited","Set","push","length","next","shift","getPos","join","animateVisited","backTrack","nextPos","left","parseInt","has","down","right","up","runDFS","stack","pop","pos","className","split","i","setTimeout","contains","currentNode","currPos","animateBackTrack","style","backgroundColor","addEventListener","Grid","visualizeBFS","visualizeDFS","Route","route"],"sourceRoot":""}