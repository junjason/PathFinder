{"version":3,"file":"main.js","mappings":"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","sources":["webpack://pathfinder/./src/scripts/grid.js","webpack://pathfinder/./src/scripts/route.js","webpack://pathfinder/./src/index.js"],"sourcesContent":["class Grid {\n    constructor(gridContainer) {\n        this.gridContainer = gridContainer;\n        this.numRows = 23;\n        this.numCols = 46;\n        this.createGrid();\n        this.initializeStartAndEnd(\".n-11-11\", \".n-11-33\");\n        this.placePortals(\".n-11-13\", \".n-11-31\");\n    }\n\n    createGrid() {\n        let floor = document.createElement(\"table\");      // for each floor, create a table\n        floor.classList.add(`table`);\n        for(let j = 0; j < this.numRows; j++) {\n            let row = document.createElement(\"tr\");       // for each row, create row and add into table\n            row.classList.add(`row-${j}`);                            // add a class of row {row#}\n            for(let k = 0; k < this.numCols; k++) {\n                let node = document.createElement(\"td\");\n                node.classList.add(`n-${j}-${k}`);\n                node.classList.add(\"node\");\n                node.dataset.status = \"unvisited\";\n                node.dataset.portal = \"none\";\n                node.dataset.cookie = \"none\";\n                node.draggable = false;\n                node.addEventListener(\"click\", () => {\n                    if (node.dataset.status === \"wall\") {\n                        node.dataset.status = \"unvisited\";\n                        node.style.removeProperty(\"background-color\");\n                    }\n                    else if (node.dataset.status === \"unvisited\" && node.dataset.portal === \"none\") {\n                        node.dataset.status = \"wall\";\n                        node.style.backgroundColor = \"black\";\n                    }\n                });\n                row.appendChild(node);\n            }\n            floor.appendChild(row);\n        }\n        this.gridContainer.appendChild(floor);\n    }\n\n    randomWalls() {\n\n    }\n\n    initializeStartAndEnd(startPos, endPos) {\n        let start = document.querySelector(startPos);\n        let end = document.querySelector(endPos);\n\n        start.classList.add(\"start\");\n        end.classList.add(\"end\");\n        start.dataset.status = \"start\";\n        end.dataset.status = \"end\";\n\n        // Make the icons draggable\n        start.draggable = true;\n        end.draggable = true;\n\n        start.innerHTML = \"<i class=\\\"fas fa-location-arrow\\\"></i>\";\n        end.innerHTML = \"<i class=\\\"fa-solid fa-flag-checkered\\\"></i>\";\n\n        // Add dragstart event listener for the icons\n        this.gridContainer.addEventListener(\"dragstart\", (event) => {\n            const targetElement = event.target;\n            if (targetElement === start) {\n                event.dataTransfer.setData(\"text\", \"start\");\n            } else if (targetElement === end) {\n                event.dataTransfer.setData(\"text\", \"end\");\n            }\n        });\n\n        // Add drop event listener for the grid cells\n        this.gridContainer.addEventListener(\"dragover\", (event) => {\n            event.preventDefault();\n        });\n\n        this.gridContainer.addEventListener(\"drop\", (event) => {\n            event.preventDefault();\n            const data = event.dataTransfer.getData(\"text\");\n            if (data === \"start\") {\n                const targetNode = event.target;\n                if (!targetNode.classList.contains(\"node\") || targetNode.dataset.status !== \"unvisited\") return;\n                targetNode.innerHTML = start.innerHTML; // Update the icon visually\n                targetNode.classList.add(\"start\");\n                targetNode.dataset.status = \"start\";\n                targetNode.draggable = true; // Set draggable to true again\n                start.innerHTML = \"\"; // Clear the previous icon\n                start.classList.remove(\"start\");\n                start.dataset.status = \"unvisited\";\n                start.draggable = false;\n                start = document.querySelector(\".start\"); // reset start variable so it can be drag and dropped again\n            } else if (data === \"end\") {\n                const targetNode = event.target;\n                if (!targetNode.classList.contains(\"node\") || targetNode.dataset.status !== \"unvisited\") return;\n                targetNode.innerHTML = end.innerHTML; // Update the icon visually\n                targetNode.classList.add(\"end\");\n                targetNode.dataset.status = \"end\";\n                targetNode.draggable = true; // Set draggable to true again\n                end.innerHTML = \"\"; // Clear the previous icon\n                end.classList.remove(\"end\");\n                end.dataset.status = \"unvisited\";\n                end.draggable = false;\n                end = document.querySelector(\".end\");   // reset end variable so it can be drag and dropped again\n            }\n        });\n    }\n\n    resetBoard() {\n        this.gridContainer.remove();\n        let outerGridContainer = document.querySelector(\".grid-container\");\n        let newGrid = document.createElement(\"div\");\n        newGrid.classList.add(\"grid\");\n        outerGridContainer.appendChild(newGrid);\n        newGrid = document.querySelector(\".grid\");\n        this.gridContainer = newGrid;\n        this.createGrid();\n        this.initializeStartAndEnd(\".n-11-11\", \".n-11-33\");\n        this.placePortals(\".n-11-13\", \".n-11-31\");\n    }\n\n    clearBoard() {\n        // iterate through entire grid\n            // set dataset-cookies to none for all\n            // set dataset-status to unvisited for all\n            // remove visited-anim class if classList contains that\n            // remove backgroundColor property if has background property\n        for (let i = 0; i < this.numRows; i++) {\n            for (let j = 0; j < this.numCols; j++) {\n                let node = document.querySelector(`.n-${i}-${j}`);\n                node.dataset.cookies = \"none\";\n                if (node.dataset.status === \"visited\") node.dataset.status = \"unvisited\";\n                if (node.classList.contains(\"visited-anim\")) node.classList.remove(\"visited-anim\");\n                if (node.classList.contains(\"shortest-path\")) node.classList.remove(\"shortest-path\");\n            }\n        }\n    }\n\n    getPosSelector(node) {\n        let classes = node.className;\n        let classNames = classes.split(\" \");\n        let coordinates = classNames[0];\n        return coordinates;\n    }\n\n    placePortals(startPortalPos, endPortalPos) {\n        let startP = document.querySelector(startPortalPos);\n        let endP = document.querySelector(endPortalPos);\n\n        // Implement bfs to add startPortal and endPortal where walls don't exist\n        // if (startP.dataset.status === \"wall\") {\n        //     let queue = [];\n        //     queue.push(startP);\n        //     while (startP.dataset.status === \"wall\") {\n        //         next = queue.shift();\n        //         // visit all neighbors and add them to queue\n        //         \n        //         startP = next;\n        //     }\n        // }\n\n        // if (endP.dataset.status === \"wall\") {\n        //     while (endP.dataset.status === \"wall\") {\n        //         next = \n        //     }\n        // }\n\n        startP.classList.add(\"portal-start\");\n        endP.classList.add(\"portal-end\");\n        startP.dataset.portal = \"portal-start\";\n        endP.dataset.portal = \"portal-end\";\n\n        // Make the icons draggable\n        startP.draggable = true;\n        endP.draggable = true;\n\n        startP.innerHTML = \"<i class=\\\"fa-solid fa-door-open\\\"></i>\";\n        endP.innerHTML = \"<i class=\\\"fa-solid fa-door-closed\\\"></i>\"\n\n        // Add dragstart event listener for the icons\n        this.gridContainer.addEventListener(\"dragstart\", (event) => {\n            const targetElement = event.target;\n            if (targetElement === startP) {\n                event.dataTransfer.setData(\"text\", \"portal-start\");\n            } else if (targetElement === endP) {\n                event.dataTransfer.setData(\"text\", \"portal-end\");\n            }\n        });\n\n        // Add drop event listener for the grid cells\n        this.gridContainer.addEventListener(\"dragover\", (event) => {\n            event.preventDefault();\n        });\n\n        this.gridContainer.addEventListener(\"drop\", (event) => {\n            event.preventDefault();\n            const data = event.dataTransfer.getData(\"text\");\n            if (data === \"portal-start\") {\n                const targetNode = event.target;\n                if (!targetNode.classList.contains(\"node\") || targetNode.dataset.status !== \"unvisited\") return;\n                targetNode.innerHTML = startP.innerHTML; // Update the icon visually\n                targetNode.classList.add(\"portal-start\");\n                targetNode.dataset.portal = \"portal-start\";\n                targetNode.draggable = true; // Set draggable to true again\n                startP.innerHTML = \"\"; // Clear the previous icon\n                startP.classList.remove(\"portal-start\");\n                startP.dataset.portal = \"none\";\n                startP.draggable = false;\n                startP = document.querySelector(\".portal-start\"); // reset start variable so it can be drag and dropped again\n            } else if (data === \"portal-end\") {\n                const targetNode = event.target;\n                if (!targetNode.classList.contains(\"node\") || targetNode.dataset.status !== \"unvisited\") return;\n                targetNode.innerHTML = endP.innerHTML; // Update the icon visually\n                targetNode.classList.add(\"portal-end\");\n                targetNode.dataset.portal = \"portal-end\";\n                targetNode.draggable = true; // Set draggable to true again\n                endP.innerHTML = \"\"; // Clear the previous icon\n                endP.classList.remove(\"portal-end\");\n                endP.dataset.portal = \"none\";\n                endP.draggable = false;\n                endP = document.querySelector(\".portal-end\");   // reset end variable so it can be drag and dropped again\n            }\n        });\n    }\n\n    removePortals() {\n        let startP = document.querySelector(\".portal-start\");\n        let endP = document.querySelector(\".portal-end\");\n\n        startP.classList.remove(\"portal-start\");\n        endP.classList.remove(\"portal-end\");\n        startP.dataset.portal = \"none\";\n        endP.dataset.portal = \"none\";\n\n        startP.draggable = false;\n        endP.draggable = false;\n\n        startP.innerHTML = \"\";\n        endP.innerHTML = \"\";\n    }\n\n    configOne() {\n\n    }\n    \n}\n\nexport default Grid;","class Route {\n    constructor(grid, start, end) {\n        this.grid = grid;\n        this.start = start;\n        this.end = end;\n        this.visitedInOrder = [];\n        this.routeFromStartToEnd = [];\n    }\n\n    // finds BFS - logic only\n    runBFS() {\n        let queue = [];\n        let visited = new Set();\n        queue.push(this.start);\n        this.visitedInOrder = [];\n\n        while (queue.length !== 0) {\n            let next = queue.shift();\n            let nextPos = this.getPos(next);\n\n            this.visitedInOrder.push(next);\n            // visited.add(this.getPos(next).join(\"-\"));\n            if (next.dataset.status !== \"end\" || next.dataset.status !== \"start\") next.dataset.status = \"visited\";\n            if (this.getPos(next).join(\"-\") === this.getPos(this.end).join(\"-\")) {\n                this.animateVisited();\n                return true;\n            }\n\n            if (next.dataset.portal === \"portal-start\") {\n                let dest = document.querySelector(\".portal-end\");\n                // destination is unvisited, add to queue\n                if (dest && !visited.has(this.getPos(dest).join(\"-\"))) {\n                    dest.dataset.cookie = \"cookie-portal-start\";\n                    queue.push(dest);\n                    visited.add(this.getPos(dest).join(\"-\"));\n                } \n            } \n            else {\n                // visit east\n                let left = document.querySelector(`.n-${nextPos[0]}-${parseInt(nextPos[1])+1}`);\n                if (left && !visited.has(this.getPos(left).join(\"-\")) && left.dataset.status !== \"wall\") {\n                    left.dataset.cookie = \"cookie-west\";\n                    queue.push(left);\n                    visited.add(this.getPos(left).join(\"-\"));\n                }\n                \n                // visit south\n                let down = document.querySelector(`.n-${parseInt(nextPos[0])+1}-${nextPos[1]}`);\n                if (down && !visited.has(this.getPos(down).join(\"-\")) && down.dataset.status !== \"wall\") {\n                    down.dataset.cookie = \"cookie-north\";\n                    queue.push(down);\n                    visited.add(this.getPos(down).join(\"-\"));\n                }\n\n                // visit west\n                let right = document.querySelector(`.n-${nextPos[0]}-${parseInt(nextPos[1])-1}`);\n                if (right && !visited.has(this.getPos(right).join(\"-\")) && right.dataset.status !== \"wall\") {\n                    right.dataset.cookie = \"cookie-east\";\n                    queue.push(right);\n                    visited.add(this.getPos(right).join(\"-\"));\n                }\n\n                // visit north\n                let up = document.querySelector(`.n-${parseInt(nextPos[0])-1}-${nextPos[1]}`);\n                if (up && !visited.has(this.getPos(up).join(\"-\")) && up.dataset.status !== \"wall\") {\n                    up.dataset.cookie = \"cookie-south\";\n                    queue.push(up);\n                    // visited.add(this.getPos(up).join(\"-\"));\n                }\n            }\n        }\n        this.animateVisited();\n        return false;\n    }\n\n    // iterative dfs\n    runDFS() {\n        let stack = [];\n        let visited = new Set();\n        this.visitedInOrder = [];\n        stack.push(this.start);\n\n        while (stack.length !== 0) {\n            let next = stack.pop();\n            let nextPos = this.getPos(next);\n\n            this.visitedInOrder.push(next);\n            visited.add(this.getPos(next).join(\"-\"));\n            if (next.dataset.status !== \"end\" || next.dataset.status !== \"start\") next.dataset.status = \"visited\";\n            if (this.getPos(next).join(\"-\") === this.getPos(this.end).join(\"-\")) {\n                this.animateVisited();\n                return true;\n            }\n\n            if (next.dataset.portal === \"portal-start\") {\n                let dest = document.querySelector(\".portal-end\");\n                if (dest && !visited.has(this.getPos(dest).join(\"-\"))) {\n                    dest.dataset.cookie = \"cookie-portal-start\";\n                    stack.push(dest);\n                } \n            } \n            else {\n                // add west\n                let right = document.querySelector(`.n-${nextPos[0]}-${parseInt(nextPos[1])-1}`);\n                if (right && !visited.has(this.getPos(right).join(\"-\")) && right.dataset.status !== \"wall\") {\n                    right.dataset.cookie = \"cookie-east\";\n                    stack.push(right);\n                }\n\n                // add north\n                let up = document.querySelector(`.n-${parseInt(nextPos[0])-1}-${nextPos[1]}`);\n                if (up && !visited.has(this.getPos(up).join(\"-\")) && up.dataset.status !== \"wall\") {\n                    up.dataset.cookie = \"cookie-south\";\n                    stack.push(up);\n                }\n                \n                // add east\n                let left = document.querySelector(`.n-${nextPos[0]}-${parseInt(nextPos[1])+1}`);\n                if (left && !visited.has(this.getPos(left).join(\"-\")) && left.dataset.status !== \"wall\") {\n                    left.dataset.cookie = \"cookie-west\";\n                    stack.push(left);\n                }\n                \n                // add south\n                let down = document.querySelector(`.n-${parseInt(nextPos[0])+1}-${nextPos[1]}`);\n                if (down && !visited.has(this.getPos(down).join(\"-\")) && down.dataset.status !== \"wall\") {\n                    down.dataset.cookie = \"cookie-north\";\n                    stack.push(down);\n                }\n            }\n        }\n        this.animateVisited();\n        return false;\n    }\n\n\n    getPos(node) {\n        let classes = node.className;\n        let classNames = classes.split(\" \");\n        let coordinates = classNames[0];\n        let pos = coordinates.split(\"-\");\n        let x = pos[1];\n        let y = pos[2];\n        return [x,y];\n    }\n\n    animateVisited() {\n        for (let i = 0; i < this.visitedInOrder.length; i++) {\n            // debugger;\n            setTimeout(() => {\n                this.visitedInOrder[i].classList.add(\"visited-anim\"); \n            }, 25*i);\n\n            if (i === this.visitedInOrder.length-1) {\n                setTimeout(() => {this.animateBackTrack();}, 25*i);\n            }\n        }\n    }\n\n    backTrack() {\n        // start at end node + use cookies to find path from end to start\n        let currentNode = this.end;\n        this.routeFromStartToEnd = [];\n        while (this.getPos(currentNode).join(\"-\") !== this.getPos(this.start).join(\"-\")) {\n            // console.log(\"hi\")\n            // debugger;\n            this.routeFromStartToEnd.push(currentNode);\n            let currPos = this.getPos(currentNode);\n\n            // came from south, go south\n            if (currentNode.dataset.cookie === \"cookie-south\") {\n                let down = document.querySelector(`.n-${parseInt(currPos[0])+1}-${currPos[1]}`);\n                currentNode = down;\n            }\n            else if (currentNode.dataset.cookie === \"cookie-north\") {\n                let up = document.querySelector(`.n-${parseInt(currPos[0])-1}-${currPos[1]}`);\n                currentNode = up;\n            }\n            else if (currentNode.dataset.cookie === \"cookie-east\") {\n                let right = document.querySelector(`.n-${currPos[0]}-${parseInt(currPos[1])+1}`);\n                currentNode = right;\n            }\n            else if (currentNode.dataset.cookie === \"cookie-west\") {\n                let left = document.querySelector(`.n-${currPos[0]}-${parseInt(currPos[1])-1}`);\n                currentNode = left;\n            }    \n            else if (currentNode.dataset.cookie === \"cookie-portal-start\") {\n                let prev = document.querySelector(\".portal-start\");\n                currentNode = prev;\n            }        \n        }\n        this.routeFromStartToEnd.push(currentNode);\n        this.routeFromStartToEnd.reverse();\n    }\n\n    animateBackTrack() {\n        for (let i = 0; i < this.routeFromStartToEnd.length; i++) {\n            setTimeout(() => {\n                this.routeFromStartToEnd[i].classList.add(\"shortest-path\");\n            }, 25*i);\n        }\n    }\n}\n\nexport default Route;","import Grid from \"./scripts/grid\";\nimport Route from \"./scripts/route\";\n\nlet grid = null;\n// let startPos = \"\";\n// let endPos = \"\";;\n// let startPortalPos = \"\";\n// let endPortalPos = \"\";\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n    // console.log(\"Hello from index.js\");\n    const gridDiv = document.querySelector(\".grid\");\n    grid = new Grid(gridDiv);\n\n    // place portals event handler\n    let portalBtn = document.querySelector(\".placePortals\");\n    let portalExists = true;\n    portalBtn.addEventListener(\"click\", () => {\n        if (!portalExists) {\n            portalExists = true;\n            grid.placePortals();\n            portalBtn.innerText = \"Remove Portals\";\n        }\n        else if (portalExists){\n            portalExists = false;\n            grid.removePortals();\n            portalBtn.innerText = \"Place Portals\";\n        }\n    });\n\n    // resets board\n    let resetBoard = document.querySelector(\".resetBoard\")\n    resetBoard.addEventListener(\"click\", () => {\n        if (portalExists){\n            portalExists = false;\n            grid.removePortals();\n        }\n        grid.resetBoard();\n        portalBtn.innerText = \"Place Portals\";\n    })\n\n    // Drop down functionality for algorithms\n    let dropbtn = document.querySelector(\".dropbtn\");\n    let dropdownContent = document.getElementById(\"myDropdown\");\n\n    dropbtn.addEventListener(\"click\", function() {\n        if (dropdownContent.style.display === \"block\") {\n            dropdownContent.style.display = \"none\";\n        } else {\n            dropdownContent.style.display = \"block\";\n        }\n    });\n\n    // algo selection logic\n    let algo = null;\n    let visualize = document.querySelector(\".visualize\");\n    visualize.addEventListener(\"click\", () => {\n        if (algo === null) {\n            visualize.innerText = \"Select an algorithm!\";\n        }\n        else if (algo === \"bfs\") {\n            let start = document.querySelector(\".start\");\n            let end = document.querySelector(\".end\");\n            let route = new Route(grid, start, end);\n            grid.clearBoard();\n            let pathFound = route.runBFS();\n            if (pathFound) route.backTrack();\n        }\n        else if (algo === \"dfs\") {\n            let start = document.querySelector(\".start\");\n            let end = document.querySelector(\".end\");\n            let route = new Route(grid, start, end);\n            grid.clearBoard();\n            let pathFound = route.runDFS(); \n            if (pathFound) route.backTrack();\n        }\n    });\n\n    let selectedBFS = document.querySelector(\".selectedBFS\");\n    let selectedDFS = document.querySelector(\".selectedDFS\");\n    selectedBFS.addEventListener(\"click\", () => {\n        algo = \"bfs\";\n        visualize.innerText = \"Visualize\";\n        dropdownContent.style.display = \"none\";\n    });\n\n    selectedDFS.addEventListener(\"click\", () => {\n        algo = \"dfs\";\n        visualize.innerText = \"Visualize\";\n        dropdownContent.style.display = \"none\";\n    });\n\n\n    // Drop down functionality for auto generate walls\n    let dropWallbtn = document.getElementById(\"wallDropBtn\");\n    let wallDropDownContent = document.querySelector(\".auto-wall-dropdown\");\n    dropWallbtn.addEventListener(\"click\", () => {\n        if (wallDropDownContent.style.display === \"block\") {\n            wallDropDownContent.style.display = \"none\";\n        } else {\n            wallDropDownContent.style.display = \"block\";\n        }\n    });\n\n    // logic for modal\n    // Get the modal\n    let modal = document.getElementById(\"myModal\");\n\n    // Get the button that opens the modal\n    let modalBtn = document.getElementById(\"myBtn\");\n\n    // Get the <span> element that closes the modal\n    let span = document.getElementsByClassName(\"close\")[0];\n\n    // When the user clicks on the button, open the modal\n    modalBtn.addEventListener(\"click\", () => {\n        modal.style.display = \"block\";\n    });\n\n    // When the user clicks on <span> (x), close the modal\n    span.addEventListener(\"click\", () => {\n        modal.style.display = \"none\";\n    });\n\n    // When the user clicks anywhere outside of the modal, close it\n    window.addEventListener(\"click\", (event) => {\n        if (event.target == modal) {\n            modal.style.display = \"none\";\n        }\n    });\n\n    \n\n\n\n\n});\n\n\n\n\n\n\n\n\n\n"],"names":["constructor","gridContainer","this","numRows","numCols","createGrid","initializeStartAndEnd","placePortals","floor","document","createElement","classList","add","j","row","k","node","dataset","status","portal","cookie","draggable","addEventListener","style","removeProperty","backgroundColor","appendChild","randomWalls","startPos","endPos","start","querySelector","end","innerHTML","event","targetElement","target","dataTransfer","setData","preventDefault","data","getData","targetNode","contains","remove","resetBoard","outerGridContainer","newGrid","clearBoard","i","cookies","getPosSelector","className","split","startPortalPos","endPortalPos","startP","endP","removePortals","configOne","grid","visitedInOrder","routeFromStartToEnd","runBFS","queue","visited","Set","push","length","next","shift","nextPos","getPos","join","animateVisited","dest","has","left","parseInt","down","right","up","runDFS","stack","pop","pos","setTimeout","animateBackTrack","backTrack","currentNode","currPos","reverse","gridDiv","Grid","portalBtn","portalExists","innerText","dropbtn","dropdownContent","getElementById","display","algo","visualize","route","Route","selectedBFS","selectedDFS","dropWallbtn","wallDropDownContent","modal","modalBtn","span","getElementsByClassName","window"],"sourceRoot":""}