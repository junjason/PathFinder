{"version":3,"file":"main.js","mappings":"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","sources":["webpack://pathfinder/./src/scripts/grid.js","webpack://pathfinder/./src/scripts/route.js","webpack://pathfinder/./src/index.js"],"sourcesContent":["class Grid {\n    constructor(gridContainer) {\n        this.gridContainer = gridContainer;\n        this.numRows = 23;\n        this.numCols = 46;\n        this.createGrid();\n        this.initializeStartAndEnd(\".n-11-11\", \".n-11-33\");\n    }\n\n    createGrid() {\n        let floor = document.createElement(\"table\");      // for each floor, create a table\n        floor.classList.add(`table`);\n        for(let j = 0; j < this.numRows; j++) {\n            let row = document.createElement(\"tr\");       // for each row, create row and add into table\n            row.classList.add(`row-${j}`);                            // add a class of row {row#}\n            for(let k = 0; k < this.numCols; k++) {\n                let node = document.createElement(\"td\");\n                node.classList.add(`n-${j}-${k}`);\n                node.classList.add(\"node\");\n                node.dataset.status = \"unvisited\";\n                node.dataset.portal = \"none\";\n                node.dataset.cookie = \"none\";\n                node.draggable = false;\n                node.addEventListener(\"click\", () => {\n                    if (node.dataset.status === \"wall\") {\n                        node.dataset.status = \"unvisited\";\n                        node.style.removeProperty(\"background-color\");\n                    }\n                    else if (node.dataset.status === \"unvisited\" && node.dataset.portal === \"none\") {\n                        node.dataset.status = \"wall\";\n                        node.style.backgroundColor = \"black\";\n                    }\n                });\n                row.appendChild(node);\n            }\n            floor.appendChild(row);\n        }\n        this.gridContainer.appendChild(floor);\n    }\n\n    initializeStartAndEnd(startPos, endPos) {\n        let start = document.querySelector(startPos);\n        let end = document.querySelector(endPos);\n\n        start.classList.add(\"start\");\n        end.classList.add(\"end\");\n        start.dataset.status = \"start\";\n        end.dataset.status = \"end\";\n\n        // Make the icons draggable\n        start.draggable = true;\n        end.draggable = true;\n\n        start.innerHTML = \"<i class=\\\"fas fa-location-arrow\\\"></i>\";\n        end.innerHTML = \"<i class=\\\"far fa-times-circle\\\"></i>\";\n\n        // Add dragstart event listener for the icons\n        this.gridContainer.addEventListener(\"dragstart\", (event) => {\n            const targetElement = event.target;\n            if (targetElement === start) {\n                event.dataTransfer.setData(\"text\", \"start\");\n            } else if (targetElement === end) {\n                event.dataTransfer.setData(\"text\", \"end\");\n            }\n        });\n\n        // Add drop event listener for the grid cells\n        this.gridContainer.addEventListener(\"dragover\", (event) => {\n            event.preventDefault();\n        });\n\n        this.gridContainer.addEventListener(\"drop\", (event) => {\n            event.preventDefault();\n            const data = event.dataTransfer.getData(\"text\");\n            if (data === \"start\") {\n                const targetNode = event.target;\n                if (!targetNode.classList.contains(\"node\") || targetNode.dataset.status !== \"unvisited\") return;\n                targetNode.innerHTML = start.innerHTML; // Update the icon visually\n                targetNode.classList.add(\"start\");\n                targetNode.dataset.status = \"start\";\n                targetNode.draggable = true; // Set draggable to true again\n                start.innerHTML = \"\"; // Clear the previous icon\n                start.classList.remove(\"start\");\n                start.dataset.status = \"unvisited\";\n                start.draggable = false;\n                start = document.querySelector(\".start\"); // reset start variable so it can be drag and dropped again\n            } else if (data === \"end\") {\n                const targetNode = event.target;\n                if (!targetNode.classList.contains(\"node\") || targetNode.dataset.status !== \"unvisited\") return;\n                targetNode.innerHTML = end.innerHTML; // Update the icon visually\n                targetNode.classList.add(\"end\");\n                targetNode.dataset.status = \"end\";\n                targetNode.draggable = true; // Set draggable to true again\n                end.innerHTML = \"\"; // Clear the previous icon\n                end.classList.remove(\"end\");\n                end.dataset.status = \"unvisited\";\n                end.draggable = false;\n                end = document.querySelector(\".end\");   // reset end variable so it can be drag and dropped again\n            }\n        });\n    }\n\n    resetBoard() {\n        this.gridContainer.remove();\n        let outerGridContainer = document.querySelector(\".grid-container\");\n        let newGrid = document.createElement(\"div\");\n        newGrid.classList.add(\"grid\");\n        outerGridContainer.appendChild(newGrid);\n        newGrid = document.querySelector(\".grid\");\n        this.gridContainer = newGrid;\n        this.createGrid();\n        this.initializeStartAndEnd(\".n-11-11\", \".n-11-33\");\n    }\n\n    clearBoard() {\n        // iterate through entire grid\n            // set dataset-cookies to none for all\n            // set dataset-status to unvisited for all\n            // remove visited-anim class if classList contains that\n            // remove backgroundColor property if has background property\n        for (let i = 0; i < this.numRows; i++) {\n            for (let j = 0; j < this.numCols; j++) {\n                let node = document.querySelector(`.n-${i}-${j}`);\n                node.dataset.cookies = \"none\";\n                if (node.dataset.status === \"visited\") node.dataset.status = \"unvisited\";\n                if (node.classList.contains(\"visited-anim\")) node.classList.remove(\"visited-anim\");\n                if (node.classList.contains(\"shortest-path\")) node.classList.remove(\"shortest-path\");\n            }\n        }\n    }\n\n    getPosSelector(node) {\n        let classes = node.className;\n        let classNames = classes.split(\" \");\n        let coordinates = classNames[0];\n        return coordinates;\n    }\n\n    placePortals() {\n        let startP = document.querySelector(\".n-11-13\");\n        let endP = document.querySelector(\".n-11-31\");\n\n        // Implement bfs to add startPortal and endPortal where walls don't exist\n        // if (startP.dataset.status === \"wall\") {\n        //     let queue = [];\n        //     queue.push(startP);\n        //     while (startP.dataset.status === \"wall\") {\n        //         next = queue.shift();\n        //         // visit all neighbors and add them to queue\n        //         \n        //         startP = next;\n        //     }\n        // }\n\n        // if (endP.dataset.status === \"wall\") {\n        //     while (endP.dataset.status === \"wall\") {\n        //         next = \n        //     }\n        // }\n\n        startP.classList.add(\"portal-start\");\n        endP.classList.add(\"portal-end\");\n        startP.dataset.portal = \"portal-start\";\n        endP.dataset.portal = \"portal-end\";\n\n        // Make the icons draggable\n        startP.draggable = true;\n        endP.draggable = true;\n\n        startP.innerHTML = \"<i class=\\\"fa-solid fa-door-open\\\"></i>\";\n        endP.innerHTML = \"<i class=\\\"fa-solid fa-door-closed\\\"></i>\"\n\n        // Add dragstart event listener for the icons\n        this.gridContainer.addEventListener(\"dragstart\", (event) => {\n            const targetElement = event.target;\n            if (targetElement === startP) {\n                event.dataTransfer.setData(\"text\", \"portal-start\");\n            } else if (targetElement === endP) {\n                event.dataTransfer.setData(\"text\", \"portal-end\");\n            }\n        });\n\n        // Add drop event listener for the grid cells\n        this.gridContainer.addEventListener(\"dragover\", (event) => {\n            event.preventDefault();\n        });\n\n        this.gridContainer.addEventListener(\"drop\", (event) => {\n            event.preventDefault();\n            const data = event.dataTransfer.getData(\"text\");\n            if (data === \"portal-start\") {\n                const targetNode = event.target;\n                if (!targetNode.classList.contains(\"node\") || targetNode.dataset.status !== \"unvisited\") return;\n                targetNode.innerHTML = startP.innerHTML; // Update the icon visually\n                targetNode.classList.add(\"portal-start\");\n                targetNode.dataset.portal = \"portal-start\";\n                targetNode.draggable = true; // Set draggable to true again\n                startP.innerHTML = \"\"; // Clear the previous icon\n                startP.classList.remove(\"portal-start\");\n                startP.dataset.portal = \"none\";\n                startP.draggable = false;\n                startP = document.querySelector(\".portal-start\"); // reset start variable so it can be drag and dropped again\n            } else if (data === \"portal-end\") {\n                const targetNode = event.target;\n                if (!targetNode.classList.contains(\"node\") || targetNode.dataset.status !== \"unvisited\") return;\n                targetNode.innerHTML = endP.innerHTML; // Update the icon visually\n                targetNode.classList.add(\"portal-end\");\n                targetNode.dataset.portal = \"portal-end\";\n                targetNode.draggable = true; // Set draggable to true again\n                endP.innerHTML = \"\"; // Clear the previous icon\n                endP.classList.remove(\"portal-end\");\n                endP.dataset.portal = \"none\";\n                endP.draggable = false;\n                endP = document.querySelector(\".portal-end\");   // reset end variable so it can be drag and dropped again\n            }\n        });\n    }\n\n    removePortals() {\n        let startP = document.querySelector(\".portal-start\");\n        let endP = document.querySelector(\".portal-end\");\n\n        startP.classList.remove(\"portal-start\");\n        endP.classList.remove(\"portal-end\");\n        startP.dataset.portal = \"none\";\n        endP.dataset.portal = \"none\";\n\n        startP.draggable = false;\n        endP.draggable = false;\n\n        startP.innerHTML = \"\";\n        endP.innerHTML = \"\";\n    }\n    \n}\n\nexport default Grid;","class Route {\n    constructor(grid, start, end) {\n        this.grid = grid;\n        this.start = start;\n        this.end = end;\n        this.visitedInOrder = [];\n        this.routeFromStartToEnd = [];\n    }\n\n    // finds BFS - logic only\n    runBFS() {\n        let queue = [];\n        let visited = new Set();\n        queue.push(this.start);\n        this.visitedInOrder = [];\n\n        while (queue.length !== 0) {\n            let next = queue.shift();\n            let nextPos = this.getPos(next);\n\n            this.visitedInOrder.push(next);\n            if (next.dataset.status !== \"end\" || next.dataset.status !== \"start\") next.dataset.status = \"visited\";\n            if (this.getPos(next).join(\"-\") === this.getPos(this.end).join(\"-\")) {\n                this.animateVisited();\n                return true;\n            }\n\n            if (next.dataset.portal === \"portal-start\") {\n                let dest = document.querySelector(\".portal-end\");\n                // destination is unvisited, add to queue\n                if (dest && !visited.has(this.getPos(dest).join(\"-\"))) {\n                    dest.dataset.cookie = \"cookie-portal-start\";\n                    queue.push(dest);\n                    visited.add(this.getPos(dest).join(\"-\"));\n                } \n            } \n            else {\n                // visit east\n                let left = document.querySelector(`.n-${nextPos[0]}-${parseInt(nextPos[1])+1}`);\n                if (left && !visited.has(this.getPos(left).join(\"-\")) && left.dataset.status !== \"wall\") {\n                    left.dataset.cookie = \"cookie-west\";\n                    queue.push(left);\n                    visited.add(this.getPos(left).join(\"-\"));\n                }\n                \n                // visit south\n                let down = document.querySelector(`.n-${parseInt(nextPos[0])+1}-${nextPos[1]}`);\n                if (down && !visited.has(this.getPos(down).join(\"-\")) && down.dataset.status !== \"wall\") {\n                    down.dataset.cookie = \"cookie-north\";\n                    queue.push(down);\n                    visited.add(this.getPos(down).join(\"-\"));\n                }\n\n                // visit west\n                let right = document.querySelector(`.n-${nextPos[0]}-${parseInt(nextPos[1])-1}`);\n                if (right && !visited.has(this.getPos(right).join(\"-\")) && right.dataset.status !== \"wall\") {\n                    right.dataset.cookie = \"cookie-east\";\n                    queue.push(right);\n                    visited.add(this.getPos(right).join(\"-\"));\n                }\n\n                // visit north\n                let up = document.querySelector(`.n-${parseInt(nextPos[0])-1}-${nextPos[1]}`);\n                if (up && !visited.has(this.getPos(up).join(\"-\")) && up.dataset.status !== \"wall\") {\n                    up.dataset.cookie = \"cookie-south\";\n                    queue.push(up);\n                    visited.add(this.getPos(up).join(\"-\"));\n                }\n            }\n        }\n        this.animateVisited();\n        return false;\n    }\n\n    // iterative dfs\n    runDFS() {\n        let stack = [];\n        let visited = new Set();\n        this.visitedInOrder = [];\n        stack.push(this.start);\n\n        while (stack.length !== 0) {\n            let next = stack.pop();\n            let nextPos = this.getPos(next);\n\n            this.visitedInOrder.push(next);\n            visited.add(this.getPos(next).join(\"-\"));\n            if (next.dataset.status !== \"end\" || next.dataset.status !== \"start\") next.dataset.status = \"visited\";\n            if (this.getPos(next).join(\"-\") === this.getPos(this.end).join(\"-\")) {\n                this.animateVisited();\n                return true;\n            }\n\n            if (next.dataset.portal === \"portal-start\") {\n                let dest = document.querySelector(\".portal-end\");\n                if (dest && !visited.has(this.getPos(dest).join(\"-\"))) {\n                    dest.dataset.cookie = \"cookie-portal-start\";\n                    stack.push(dest);\n                } \n            } \n            else {\n                // add west\n                let right = document.querySelector(`.n-${nextPos[0]}-${parseInt(nextPos[1])-1}`);\n                if (right && !visited.has(this.getPos(right).join(\"-\")) && right.dataset.status !== \"wall\") {\n                    right.dataset.cookie = \"cookie-east\";\n                    stack.push(right);\n                }\n\n                // add north\n                let up = document.querySelector(`.n-${parseInt(nextPos[0])-1}-${nextPos[1]}`);\n                if (up && !visited.has(this.getPos(up).join(\"-\")) && up.dataset.status !== \"wall\") {\n                    up.dataset.cookie = \"cookie-south\";\n                    stack.push(up);\n                }\n                \n                // add east\n                let left = document.querySelector(`.n-${nextPos[0]}-${parseInt(nextPos[1])+1}`);\n                if (left && !visited.has(this.getPos(left).join(\"-\")) && left.dataset.status !== \"wall\") {\n                    left.dataset.cookie = \"cookie-west\";\n                    stack.push(left);\n                }\n                \n                // add south\n                let down = document.querySelector(`.n-${parseInt(nextPos[0])+1}-${nextPos[1]}`);\n                if (down && !visited.has(this.getPos(down).join(\"-\")) && down.dataset.status !== \"wall\") {\n                    down.dataset.cookie = \"cookie-north\";\n                    stack.push(down);\n                }\n            }\n        }\n        this.animateVisited();\n        return false;\n    }\n\n\n    getPos(node) {\n        let classes = node.className;\n        let classNames = classes.split(\" \");\n        let coordinates = classNames[0];\n        let pos = coordinates.split(\"-\");\n        let x = pos[1];\n        let y = pos[2];\n        return [x,y];\n    }\n\n    animateVisited() {\n        for (let i = 0; i < this.visitedInOrder.length; i++) {\n            // debugger;\n            setTimeout(() => {\n                this.visitedInOrder[i].classList.add(\"visited-anim\"); \n            }, 25*i);\n\n            if (i === this.visitedInOrder.length-1) {\n                setTimeout(() => {this.animateBackTrack();}, 25*i);\n            }\n        }\n    }\n\n    backTrack() {\n        // start at end node + use cookies to find path from end to start\n        let currentNode = this.end;\n        this.routeFromStartToEnd = [];\n        while (this.getPos(currentNode).join(\"-\") !== this.getPos(this.start).join(\"-\")) {\n            // console.log(\"hi\")\n            // debugger;\n            this.routeFromStartToEnd.push(currentNode);\n            let currPos = this.getPos(currentNode);\n\n            // came from south, go south\n            if (currentNode.dataset.cookie === \"cookie-south\") {\n                let down = document.querySelector(`.n-${parseInt(currPos[0])+1}-${currPos[1]}`);\n                currentNode = down;\n            }\n            else if (currentNode.dataset.cookie === \"cookie-north\") {\n                let up = document.querySelector(`.n-${parseInt(currPos[0])-1}-${currPos[1]}`);\n                currentNode = up;\n            }\n            else if (currentNode.dataset.cookie === \"cookie-east\") {\n                let right = document.querySelector(`.n-${currPos[0]}-${parseInt(currPos[1])+1}`);\n                currentNode = right;\n            }\n            else if (currentNode.dataset.cookie === \"cookie-west\") {\n                let left = document.querySelector(`.n-${currPos[0]}-${parseInt(currPos[1])-1}`);\n                currentNode = left;\n            }    \n            else if (currentNode.dataset.cookie === \"cookie-portal-start\") {\n                let prev = document.querySelector(\".portal-start\");\n                currentNode = prev;\n            }        \n        }\n        this.routeFromStartToEnd.push(currentNode);\n        this.routeFromStartToEnd.reverse();\n    }\n\n    animateBackTrack() {\n        for (let i = 0; i < this.routeFromStartToEnd.length; i++) {\n            setTimeout(() => {\n                this.routeFromStartToEnd[i].classList.add(\"shortest-path\");\n            }, 25*i);\n        }\n    }\n}\n\nexport default Route;","import Grid from \"./scripts/grid\";\nimport Route from \"./scripts/route\";\n\nlet grid = null;\n// let startPos = \"\";\n// let endPos = \"\";;\n// let startPortalPos = \"\";\n// let endPortalPos = \"\";\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n    // console.log(\"Hello from index.js\");\n    const gridDiv = document.querySelector(\".grid\");\n    grid = new Grid(gridDiv);\n\n    // place portals event handler\n    let portalBtn = document.querySelector(\".placePortals\");\n    let portalExists = false;\n    portalBtn.addEventListener(\"click\", () => {\n        if (!portalExists) {\n            portalExists = true;\n            grid.placePortals();\n            portalBtn.innerText = \"Remove Portals\";\n        }\n        else if (portalExists){\n            portalExists = false;\n            grid.removePortals();\n            portalBtn.innerText = \"Place Portals\";\n        }\n    });\n\n    // resets board\n    let resetBoard = document.querySelector(\".resetBoard\")\n    resetBoard.addEventListener(\"click\", () => {\n        if (portalExists){\n            portalExists = false;\n            grid.removePortals();\n        }\n        grid.resetBoard();\n        portalBtn.innerText = \"Place Portals\";\n    })\n\n    // Drop down functionality for algorithms\n    let dropbtn = document.querySelector(\".dropbtn\");\n    let dropdownContent = document.getElementById(\"myDropdown\");\n\n    dropbtn.addEventListener(\"click\", function() {\n        if (dropdownContent.style.display === \"block\") {\n            dropdownContent.style.display = \"none\";\n        } else {\n            dropdownContent.style.display = \"block\";\n        }\n    });\n\n    // algo selection logic\n    let algo = null;\n    let visualize = document.querySelector(\".visualize\");\n    visualize.addEventListener(\"click\", () => {\n        if (algo === null) {\n            visualize.innerText = \"Select an algorithm!\";\n        }\n        else if (algo === \"bfs\") {\n            let start = document.querySelector(\".start\");\n            let end = document.querySelector(\".end\");\n            let route = new Route(grid, start, end);\n            grid.clearBoard();\n            let pathFound = route.runBFS();\n            if (pathFound) route.backTrack();\n        }\n        else if (algo === \"dfs\") {\n            let start = document.querySelector(\".start\");\n            let end = document.querySelector(\".end\");\n            let route = new Route(grid, start, end);\n            grid.clearBoard();\n            let pathFound = route.runDFS(); \n            if (pathFound) route.backTrack();\n        }\n    });\n\n    let selectedBFS = document.querySelector(\".selectedBFS\");\n    let selectedDFS = document.querySelector(\".selectedDFS\");\n    selectedBFS.addEventListener(\"click\", () => {\n        algo = \"bfs\";\n        visualize.innerText = \"Visualize\";\n        dropdownContent.style.display = \"none\";\n    });\n\n    selectedDFS.addEventListener(\"click\", () => {\n        algo = \"dfs\";\n        visualize.innerText = \"Visualize\";\n        dropdownContent.style.display = \"none\";\n    });\n\n\n    // Drop down functionality for auto generate walls\n    let dropWallbtn = document.getElementById(\"wallDropBtn\");\n    let wallDropDownContent = document.querySelector(\".auto-wall-dropdown\");\n    dropWallbtn.addEventListener(\"click\", () => {\n        if (wallDropDownContent.style.display === \"block\") {\n            wallDropDownContent.style.display = \"none\";\n        } else {\n            wallDropDownContent.style.display = \"block\";\n        }\n    });\n\n    // logic for modal\n    // Get the modal\n    let modal = document.getElementById(\"myModal\");\n\n    // Get the button that opens the modal\n    let modalBtn = document.getElementById(\"myBtn\");\n\n    // Get the <span> element that closes the modal\n    let span = document.getElementsByClassName(\"close\")[0];\n\n    // When the user clicks on the button, open the modal\n    modalBtn.addEventListener(\"click\", () => {\n        modal.style.display = \"block\";\n    });\n\n    // When the user clicks on <span> (x), close the modal\n    span.addEventListener(\"click\", () => {\n        modal.style.display = \"none\";\n    });\n\n    // When the user clicks anywhere outside of the modal, close it\n    window.addEventListener(\"click\", (event) => {\n        if (event.target == modal) {\n            modal.style.display = \"none\";\n        }\n    });\n\n    \n\n\n\n\n});\n\n\n\n\n\n\n\n\n\n"],"names":["constructor","gridContainer","this","numRows","numCols","createGrid","initializeStartAndEnd","floor","document","createElement","classList","add","j","row","k","node","dataset","status","portal","cookie","draggable","addEventListener","style","removeProperty","backgroundColor","appendChild","startPos","endPos","start","querySelector","end","innerHTML","event","targetElement","target","dataTransfer","setData","preventDefault","data","getData","targetNode","contains","remove","resetBoard","outerGridContainer","newGrid","clearBoard","i","cookies","getPosSelector","className","split","placePortals","startP","endP","removePortals","grid","visitedInOrder","routeFromStartToEnd","runBFS","queue","visited","Set","push","length","next","shift","nextPos","getPos","join","animateVisited","dest","has","left","parseInt","down","right","up","runDFS","stack","pop","pos","setTimeout","animateBackTrack","backTrack","currentNode","currPos","reverse","gridDiv","Grid","portalBtn","portalExists","innerText","dropbtn","dropdownContent","getElementById","display","algo","visualize","route","Route","selectedBFS","selectedDFS","dropWallbtn","wallDropDownContent","modal","modalBtn","span","getElementsByClassName","window"],"sourceRoot":""}